{"version":3,"sources":["App.js","component/ResultPanel.js","component/Keypad.js","logo.svg","serviceWorker.js","index.js"],"names":["App","onButtonClick","button","resetResultPanel","calculateResult","backspace","setState","prevState","result","state","slice","checkValue","includes","replace","eval","e","className","this","href","Component","ResultPanel","props","Keypad","name","onClick","target","module","exports","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.670e738e.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Component } from 'react';\nimport ResultPanel from './component/ResultPanel'\nimport Keypad from './component/Keypad'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      result: \"\"\n    }\n  }\n\n  onButtonClick = button => {\n\n    if (button === 'CLEAR') {\n      this.resetResultPanel()\n    }\n\n    else if (button === '=') {\n      this.calculateResult()\n    }\n\n    else if (button === 'BACKSPACE') {\n      this.backspace()\n    }\n\n    else {\n\n      this.setState(prevState => ({\n        result: prevState.result + button\n      }))\n\n    }\n\n  }\n\n  resetResultPanel = () => {\n    this.setState({\n      result: \"\"\n    })\n  }\n\n  backspace = () => {\n    this.setState({\n      result: this.state.result.slice(0, -1)\n    })\n  }\n\n  calculateResult = () => {\n\n    let checkValue;\n\n    if (this.state.result.includes('--')) {\n      checkValue = this.state.result.replace('--', '+')\n    }\n    else {\n      checkValue = this.state.result\n    }\n    try {\n      this.setState({\n        result: (eval(checkValue) || \"\") + \"\"\n      })\n    }\n    catch (e) {\n      this.setState({\n        result: \"Error:Press CLEAR \"\n      })\n    }\n\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"calculator-app\">\n          <h1>Calculator Using React</h1>\n          <ResultPanel result={this.state.result} />\n          <Keypad onButtonClick={this.onButtonClick} />\n        </div>\n        <h1>Follow me on <a href=\"https://in.linkedin.com/in/aniket-tikone-27808a138\">Linkedin</a></h1>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react'\nimport '../App.css'\n\nclass ResultPanel extends Component {\n    render() {\n\n        let result = this.props.result;\n\n        return (\n            <div className=\"result\">\n                <p>{result}</p>\n            </div>\n        )\n    }\n}\n\nexport default ResultPanel","import React, { Component } from 'react'\n\nclass Keypad extends Component {\n    render() {\n        return (\n            <div>\n                <button name=\"(\" onClick={e => this.props.onButtonClick(e.target.name)}>(</button>\n                <button name=\"BACKSPACE\" onClick={e => this.props.onButtonClick(e.target.name)}>BACKSPACE</button>\n                <button name=\")\" onClick={e => this.props.onButtonClick(e.target.name)}>)</button>\n                <button name=\"CLEAR\" onClick={e => this.props.onButtonClick(e.target.name)}>CLEAR</button><br />\n\n                <button name=\"1\" onClick={e => this.props.onButtonClick(e.target.name)}>1</button>\n                <button name=\"2\" onClick={e => this.props.onButtonClick(e.target.name)}>2</button>\n                <button name=\"3\" onClick={e => this.props.onButtonClick(e.target.name)}>3</button>\n                <button name=\"+\" onClick={e => this.props.onButtonClick(e.target.name)}>+</button><br />\n\n                <button name=\"4\" onClick={e => this.props.onButtonClick(e.target.name)}>4</button>\n                <button name=\"5\" onClick={e => this.props.onButtonClick(e.target.name)}>5</button>\n                <button name=\"6\" onClick={e => this.props.onButtonClick(e.target.name)}>6</button>\n                <button name=\"-\" onClick={e => this.props.onButtonClick(e.target.name)}>-</button><br />\n\n                <button name=\"7\" onClick={e => this.props.onButtonClick(e.target.name)}>7</button>\n                <button name=\"8\" onClick={e => this.props.onButtonClick(e.target.name)}>8</button>\n                <button name=\"9\" onClick={e => this.props.onButtonClick(e.target.name)}>9</button>\n                <button name=\"*\" onClick={e => this.props.onButtonClick(e.target.name)}>*</button><br />\n\n                <button name=\".\" onClick={e => this.props.onButtonClick(e.target.name)}>.</button>\n                <button name=\"0\" onClick={e => this.props.onButtonClick(e.target.name)}>0</button>\n                <button name=\"=\" onClick={e => this.props.onButtonClick(e.target.name)}>=</button>\n                <button name=\"/\" onClick={e => this.props.onButtonClick(e.target.name)}>%</button>\n\n\n\n\n\n            </div>\n        )\n    }\n}\n\nexport default Keypad","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}